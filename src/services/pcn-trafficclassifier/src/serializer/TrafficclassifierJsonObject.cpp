/**
* trafficclassifier API generated from trafficclassifier.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "TrafficclassifierJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

TrafficclassifierJsonObject::TrafficclassifierJsonObject() {
  m_nameIsSet = false;
  m_trafficClassIsSet = false;
}

TrafficclassifierJsonObject::TrafficclassifierJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_trafficClassIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("traffic-class")) {
    for (auto& item : val["traffic-class"]) {
      TrafficClassJsonObject newItem{ item };
      m_trafficClass.push_back(newItem);
    }

    m_trafficClassIsSet = true;
  }
}

nlohmann::json TrafficclassifierJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_trafficClass) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["traffic-class"] = jsonArray;
    }
  }

  return val;
}

std::string TrafficclassifierJsonObject::getName() const {
  return m_name;
}

void TrafficclassifierJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool TrafficclassifierJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<TrafficClassJsonObject>& TrafficclassifierJsonObject::getTrafficClass() const{
  return m_trafficClass;
}

void TrafficclassifierJsonObject::addTrafficClass(TrafficClassJsonObject value) {
  m_trafficClass.push_back(value);
  m_trafficClassIsSet = true;
}


bool TrafficclassifierJsonObject::trafficClassIsSet() const {
  return m_trafficClassIsSet;
}

void TrafficclassifierJsonObject::unsetTrafficClass() {
  m_trafficClassIsSet = false;
}


}
}
}

