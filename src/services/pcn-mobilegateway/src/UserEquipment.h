/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/UserEquipmentBase.h"


class Mobilegateway;

using namespace polycube::service::model;


// Structures of data in the data plane, see data plane code for description 

struct ue_data {
  uint32_t tunnel_endpoint;
  uint32_t teid;
} __attribute__((packed));

struct rate_data {
  uint64_t limit;
  uint64_t forwarded_bits;
} __attribute__((packed));


class UserEquipment : public UserEquipmentBase {
 public:
  UserEquipment(Mobilegateway &parent, const UserEquipmentJsonObject &conf);
  virtual ~UserEquipment();

  /// <summary>
  /// IP address of the User Equipment
  /// </summary>
  std::string getIp() override;

  /// <summary>
  /// IP address of the Base Station that connects the User Equipment
  /// </summary>
  std::string getTunnelEndpoint() override;
  void setTunnelEndpoint(const std::string &value) override;

  /// <summary>
  /// Tunnel Endpoint ID of the GTP tunnel used by the User Equipment
  /// </summary>
  uint32_t getTeid() override;
  void setTeid(const uint32_t &value) override;

  /// <summary>
  /// Rate limit for the traffic exchanged by the User Equipment (in pps)
  /// </summary>
  uint32_t getRateLimit() override;
  void setRateLimit(const uint32_t &value) override;

 private:
  std::string ip_;
  std::string tunnel_endpoint_;
  uint32_t teid_;
  uint32_t rate_limit_;

  void insertIntoDPRoutingTable();
  void insertIntoDPUserEquipments();
  void insertIntoDPTrafficRates();
};
