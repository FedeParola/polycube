/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "MobilegatewayBase.h"

MobilegatewayBase::MobilegatewayBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Mobilegateway] [%n] [%l] %v");
}



MobilegatewayBase::~MobilegatewayBase() {}

void MobilegatewayBase::update(const MobilegatewayJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
      m->update(i);
    }
  }
  if (conf.routeIsSet()) {
    for (auto &i : conf.getRoute()) {
      auto network = i.getNetwork();
      auto nexthop = i.getNexthop();
      auto m = getRoute(network, nexthop);
      m->update(i);
    }
  }
  if (conf.arpTableIsSet()) {
    for (auto &i : conf.getArpTable()) {
      auto address = i.getAddress();
      auto m = getArpTable(address);
      m->update(i);
    }
  }
  if (conf.userEquipmentIsSet()) {
    for (auto &i : conf.getUserEquipment()) {
      auto ip = i.getIp();
      auto m = getUserEquipment(ip);
      m->update(i);
    }
  }
  if (conf.baseStationIsSet()) {
    for (auto &i : conf.getBaseStation()) {
      auto ip = i.getIp();
      auto m = getBaseStation(ip);
      m->update(i);
    }
  }
}

MobilegatewayJsonObject MobilegatewayBase::toJsonObject() {
  MobilegatewayJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }
  for(auto &i : getRouteList()) {
    conf.addRoute(i->toJsonObject());
  }
  for(auto &i : getArpTableList()) {
    conf.addArpTable(i->toJsonObject());
  }
  for(auto &i : getUserEquipmentList()) {
    conf.addUserEquipment(i->toJsonObject());
  }
  for(auto &i : getBaseStationList()) {
    conf.addBaseStation(i->toJsonObject());
  }

  return conf;
}
void MobilegatewayBase::addPortsList(const std::vector<PortsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addPorts(name_, i);
  }
}

void MobilegatewayBase::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  delPorts(name);
  std::string name_ = conf.getName();
  addPorts(name_, conf);
}

void MobilegatewayBase::delPortsList() {
  auto elements = getPortsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delPorts(name_);
  }
}

void MobilegatewayBase::addPorts(const std::string &name, const PortsJsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void MobilegatewayBase::delPorts(const std::string &name) {
  remove_port(name);
}

std::shared_ptr<Ports> MobilegatewayBase::getPorts(const std::string &name) {
  return get_port(name);
}

std::vector<std::shared_ptr<Ports>> MobilegatewayBase::getPortsList() {
  return get_ports();
}
void MobilegatewayBase::addRouteList(const std::vector<RouteJsonObject> &conf) {
  for (auto &i : conf) {
    std::string network_ = i.getNetwork();
    std::string nexthop_ = i.getNexthop();
    addRoute(network_, nexthop_, i);
  }
}

void MobilegatewayBase::replaceRoute(const std::string &network, const std::string &nexthop, const RouteJsonObject &conf) {
  delRoute(network, nexthop);
  std::string network_ = conf.getNetwork();
  std::string nexthop_ = conf.getNexthop();
  addRoute(network_, nexthop_, conf);
}

void MobilegatewayBase::delRouteList() {
  auto elements = getRouteList();
  for (auto &i : elements) {
    std::string network_ = i->getNetwork();
    std::string nexthop_ = i->getNexthop();
    delRoute(network_, nexthop_);
  }
}
void MobilegatewayBase::addArpTableList(const std::vector<ArpTableJsonObject> &conf) {
  for (auto &i : conf) {
    std::string address_ = i.getAddress();
    addArpTable(address_, i);
  }
}

void MobilegatewayBase::replaceArpTable(const std::string &address, const ArpTableJsonObject &conf) {
  delArpTable(address);
  std::string address_ = conf.getAddress();
  addArpTable(address_, conf);
}

void MobilegatewayBase::delArpTableList() {
  auto elements = getArpTableList();
  for (auto &i : elements) {
    std::string address_ = i->getAddress();
    delArpTable(address_);
  }
}
void MobilegatewayBase::addUserEquipmentList(const std::vector<UserEquipmentJsonObject> &conf) {
  for (auto &i : conf) {
    std::string ip_ = i.getIp();
    addUserEquipment(ip_, i);
  }
}

void MobilegatewayBase::replaceUserEquipment(const std::string &ip, const UserEquipmentJsonObject &conf) {
  delUserEquipment(ip);
  std::string ip_ = conf.getIp();
  addUserEquipment(ip_, conf);
}

void MobilegatewayBase::delUserEquipmentList() {
  auto elements = getUserEquipmentList();
  for (auto &i : elements) {
    std::string ip_ = i->getIp();
    delUserEquipment(ip_);
  }
}
void MobilegatewayBase::addBaseStationList(const std::vector<BaseStationJsonObject> &conf) {
  for (auto &i : conf) {
    std::string ip_ = i.getIp();
    addBaseStation(ip_, i);
  }
}

void MobilegatewayBase::replaceBaseStation(const std::string &ip, const BaseStationJsonObject &conf) {
  delBaseStation(ip);
  std::string ip_ = conf.getIp();
  addBaseStation(ip_, conf);
}

void MobilegatewayBase::delBaseStationList() {
  auto elements = getBaseStationList();
  for (auto &i : elements) {
    std::string ip_ = i->getIp();
    delBaseStation(ip_);
  }
}


