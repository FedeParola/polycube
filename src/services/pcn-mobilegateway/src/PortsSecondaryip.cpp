/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/

// TODO: Modify these methods with your own implementation

#include "PortsSecondaryip.h"
#include "Mobilegateway.h"
#include "Ports.h"


PortsSecondaryip::PortsSecondaryip(Ports &parent, const PortsSecondaryipJsonObject &conf)
    : PortsSecondaryipBase(parent) {
  // TODO: check that no other router port exists in the same network
  ip_ = conf.getIp();
  parent.logger()->debug("Adding secondary address [ip: {0}]", ip_);

  int max_address = MAX_SECONDARY_ADDRESSES;
  if (parent.secondary_ips_.size() >= max_address) {
    throw std::runtime_error("Maximum number of secondary IPs on the port "
                            + parent.getName());
  }

  /*
  * Add two routes in the routing table
  */
  int index = parent.parent_.Cube::get_port(parent.getName())->index();
  parent.parent_.add_local_route(ip_, parent.getName(), index);
}

PortsSecondaryip::~PortsSecondaryip() {}

std::string PortsSecondaryip::getIp() {
  // This method retrieves the ip value.
  return ip_;
}

void PortsSecondaryip::createInControlPlane(
    Ports &parent, const std::string &ip,
    const PortsSecondaryipJsonObject &conf) {
  // This method creates the actual PortsSecondaryip object given thee key
  // param.

  // TODO: a port cannot have more than MAX_SECONDARY_ADDRESSES secondary addresses.
  // This constraint come
  // from a constant defined in the fast paths

  parent.logger()->info(
      "Adding secondary address [port: {0} - ip: {1}]", parent.getName(), ip);

  parent.logger()->info("Port {0} has already {1} secondary addresses",
                        parent.getName(), parent.secondary_ips_.size());
  auto ret = parent.secondary_ips_.emplace(PortsSecondaryip(parent, conf));
  parent.logger()->info("Now port {0} has {1} secondary addresses",
                        parent.getName(), parent.secondary_ips_.size());
}
