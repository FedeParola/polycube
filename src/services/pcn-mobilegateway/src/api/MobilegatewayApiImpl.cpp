/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "MobilegatewayApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace MobilegatewayApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Mobilegateway>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Mobilegateway> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_mobilegateway_by_id(const std::string &name, const MobilegatewayJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Mobilegateway>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Mobilegateway>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_mobilegateway_by_id(const std::string &name, const MobilegatewayJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_mobilegateway_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<MobilegatewayJsonObject> read_mobilegateway_list_by_id() {
  std::vector<MobilegatewayJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Create arp-table by ID
*
* Create operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
create_mobilegateway_arp_table_by_id(const std::string &name, const std::string &address, const ArpTableJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->addArpTable(address, value);
}

/**
* @brief   Create arp-table by ID
*
* Create operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
create_mobilegateway_arp_table_list_by_id(const std::string &name, const std::vector<ArpTableJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  mobilegateway->addArpTableList(value);
}

/**
* @brief   Create base-station by ID
*
* Create operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
create_mobilegateway_base_station_by_id(const std::string &name, const std::string &ip, const BaseStationJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->addBaseStation(ip, value);
}

/**
* @brief   Create base-station by ID
*
* Create operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
create_mobilegateway_base_station_list_by_id(const std::string &name, const std::vector<BaseStationJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  mobilegateway->addBaseStationList(value);
}

/**
* @brief   Create ports by ID
*
* Create operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
create_mobilegateway_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->addPorts(portsName, value);
}

/**
* @brief   Create ports by ID
*
* Create operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
create_mobilegateway_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  mobilegateway->addPortsList(value);
}

/**
* @brief   Create secondaryip by ID
*
* Create operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] ip ID of ip
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
create_mobilegateway_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const PortsSecondaryipJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->addSecondaryip(ip, value);
}

/**
* @brief   Create secondaryip by ID
*
* Create operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
create_mobilegateway_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  ports->addSecondaryipList(value);
}

/**
* @brief   Create route by ID
*
* Create operation of resource: route*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
* @param[in] value routebody object
*
* Responses:
*
*/
void
create_mobilegateway_route_by_id(const std::string &name, const std::string &network, const std::string &nexthop, const RouteJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->addRoute(network, nexthop, value);
}

/**
* @brief   Create route by ID
*
* Create operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
create_mobilegateway_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  mobilegateway->addRouteList(value);
}

/**
* @brief   Create user-equipment by ID
*
* Create operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
create_mobilegateway_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->addUserEquipment(ip, value);
}

/**
* @brief   Create user-equipment by ID
*
* Create operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
create_mobilegateway_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  auto mobilegateway = get_cube(name);
  mobilegateway->addUserEquipmentList(value);
}

/**
* @brief   Delete arp-table by ID
*
* Delete operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
*
*/
void
delete_mobilegateway_arp_table_by_id(const std::string &name, const std::string &address) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->delArpTable(address);
}

/**
* @brief   Delete arp-table by ID
*
* Delete operation of resource: arp-table*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_mobilegateway_arp_table_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  mobilegateway->delArpTableList();
}

/**
* @brief   Delete base-station by ID
*
* Delete operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
*
*/
void
delete_mobilegateway_base_station_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->delBaseStation(ip);
}

/**
* @brief   Delete base-station by ID
*
* Delete operation of resource: base-station*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_mobilegateway_base_station_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  mobilegateway->delBaseStationList();
}

/**
* @brief   Delete ports by ID
*
* Delete operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
*
*/
void
delete_mobilegateway_ports_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->delPorts(portsName);
}

/**
* @brief   Delete ports by ID
*
* Delete operation of resource: ports*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_mobilegateway_ports_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  mobilegateway->delPortsList();
}

/**
* @brief   Delete secondaryip by ID
*
* Delete operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] ip ID of ip
*
* Responses:
*
*/
void
delete_mobilegateway_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->delSecondaryip(ip);
}

/**
* @brief   Delete secondaryip by ID
*
* Delete operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
*
*/
void
delete_mobilegateway_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  ports->delSecondaryipList();
}

/**
* @brief   Delete route by ID
*
* Delete operation of resource: route*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
*
* Responses:
*
*/
void
delete_mobilegateway_route_by_id(const std::string &name, const std::string &network, const std::string &nexthop) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->delRoute(network, nexthop);
}

/**
* @brief   Delete route by ID
*
* Delete operation of resource: route*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_mobilegateway_route_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  mobilegateway->delRouteList();
}

/**
* @brief   Delete user-equipment by ID
*
* Delete operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
*
*/
void
delete_mobilegateway_user_equipment_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->delUserEquipment(ip);
}

/**
* @brief   Delete user-equipment by ID
*
* Delete operation of resource: user-equipment*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_mobilegateway_user_equipment_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  mobilegateway->delUserEquipmentList();
}

/**
* @brief   Read arp-table by ID
*
* Read operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* ArpTableJsonObject
*/
ArpTableJsonObject
read_mobilegateway_arp_table_by_id(const std::string &name, const std::string &address) {
  auto mobilegateway = get_cube(name);
  return mobilegateway->getArpTable(address)->toJsonObject();

}

/**
* @brief   Read interface by ID
*
* Read operation of resource: interface*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_arp_table_interface_by_id(const std::string &name, const std::string &address) {
  auto mobilegateway = get_cube(name);
  auto arpTable = mobilegateway->getArpTable(address);
  return arpTable->getInterface();

}

/**
* @brief   Read arp-table by ID
*
* Read operation of resource: arp-table*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<ArpTableJsonObject>
*/
std::vector<ArpTableJsonObject>
read_mobilegateway_arp_table_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  auto &&arpTable = mobilegateway->getArpTableList();
  std::vector<ArpTableJsonObject> m;
  for(auto &i : arpTable)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read mac by ID
*
* Read operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_arp_table_mac_by_id(const std::string &name, const std::string &address) {
  auto mobilegateway = get_cube(name);
  auto arpTable = mobilegateway->getArpTable(address);
  return arpTable->getMac();

}

/**
* @brief   Read base-station by ID
*
* Read operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* BaseStationJsonObject
*/
BaseStationJsonObject
read_mobilegateway_base_station_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  return mobilegateway->getBaseStation(ip)->toJsonObject();

}

/**
* @brief   Read base-station by ID
*
* Read operation of resource: base-station*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<BaseStationJsonObject>
*/
std::vector<BaseStationJsonObject>
read_mobilegateway_base_station_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  auto &&baseStation = mobilegateway->getBaseStationList();
  std::vector<BaseStationJsonObject> m;
  for(auto &i : baseStation)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read mobilegateway by ID
*
* Read operation of resource: mobilegateway*
*
* @param[in] name ID of name
*
* Responses:
* MobilegatewayJsonObject
*/
MobilegatewayJsonObject
read_mobilegateway_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read ports by ID
*
* Read operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* PortsJsonObject
*/
PortsJsonObject
read_mobilegateway_ports_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  return mobilegateway->getPorts(portsName)->toJsonObject();

}

/**
* @brief   Read direction by ID
*
* Read operation of resource: direction*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* PortsDirectionEnum
*/
PortsDirectionEnum
read_mobilegateway_ports_direction_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  return ports->getDirection();

}

/**
* @brief   Read ip by ID
*
* Read operation of resource: ip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_ports_ip_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  return ports->getIp();

}

/**
* @brief   Read ports by ID
*
* Read operation of resource: ports*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<PortsJsonObject>
*/
std::vector<PortsJsonObject>
read_mobilegateway_ports_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  auto &&ports = mobilegateway->getPortsList();
  std::vector<PortsJsonObject> m;
  for(auto &i : ports)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read mac by ID
*
* Read operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_ports_mac_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  return ports->getMac();

}

/**
* @brief   Read secondaryip by ID
*
* Read operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] ip ID of ip
*
* Responses:
* PortsSecondaryipJsonObject
*/
PortsSecondaryipJsonObject
read_mobilegateway_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  return ports->getSecondaryip(ip)->toJsonObject();

}

/**
* @brief   Read secondaryip by ID
*
* Read operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* std::vector<PortsSecondaryipJsonObject>
*/
std::vector<PortsSecondaryipJsonObject>
read_mobilegateway_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  auto &&secondaryip = ports->getSecondaryipList();
  std::vector<PortsSecondaryipJsonObject> m;
  for(auto &i : secondaryip)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read route by ID
*
* Read operation of resource: route*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
*
* Responses:
* RouteJsonObject
*/
RouteJsonObject
read_mobilegateway_route_by_id(const std::string &name, const std::string &network, const std::string &nexthop) {
  auto mobilegateway = get_cube(name);
  return mobilegateway->getRoute(network, nexthop)->toJsonObject();

}

/**
* @brief   Read interface by ID
*
* Read operation of resource: interface*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_route_interface_by_id(const std::string &name, const std::string &network, const std::string &nexthop) {
  auto mobilegateway = get_cube(name);
  auto route = mobilegateway->getRoute(network, nexthop);
  return route->getInterface();

}

/**
* @brief   Read route by ID
*
* Read operation of resource: route*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<RouteJsonObject>
*/
std::vector<RouteJsonObject>
read_mobilegateway_route_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  auto &&route = mobilegateway->getRouteList();
  std::vector<RouteJsonObject> m;
  for(auto &i : route)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read pathcost by ID
*
* Read operation of resource: pathcost*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
*
* Responses:
* uint32_t
*/
uint32_t
read_mobilegateway_route_pathcost_by_id(const std::string &name, const std::string &network, const std::string &nexthop) {
  auto mobilegateway = get_cube(name);
  auto route = mobilegateway->getRoute(network, nexthop);
  return route->getPathcost();

}

/**
* @brief   Read user-equipment by ID
*
* Read operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* UserEquipmentJsonObject
*/
UserEquipmentJsonObject
read_mobilegateway_user_equipment_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  return mobilegateway->getUserEquipment(ip)->toJsonObject();

}

/**
* @brief   Read user-equipment by ID
*
* Read operation of resource: user-equipment*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<UserEquipmentJsonObject>
*/
std::vector<UserEquipmentJsonObject>
read_mobilegateway_user_equipment_list_by_id(const std::string &name) {
  auto mobilegateway = get_cube(name);
  auto &&userEquipment = mobilegateway->getUserEquipmentList();
  std::vector<UserEquipmentJsonObject> m;
  for(auto &i : userEquipment)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read rate-limit by ID
*
* Read operation of resource: rate-limit*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* uint32_t
*/
uint32_t
read_mobilegateway_user_equipment_rate_limit_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);
  return userEquipment->getRateLimit();

}

/**
* @brief   Read teid by ID
*
* Read operation of resource: teid*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* uint32_t
*/
uint32_t
read_mobilegateway_user_equipment_teid_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);
  return userEquipment->getTeid();

}

/**
* @brief   Read tunnel-endpoint by ID
*
* Read operation of resource: tunnel-endpoint*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
*
* Responses:
* std::string
*/
std::string
read_mobilegateway_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);
  return userEquipment->getTunnelEndpoint();

}

/**
* @brief   Replace arp-table by ID
*
* Replace operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
replace_mobilegateway_arp_table_by_id(const std::string &name, const std::string &address, const ArpTableJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->replaceArpTable(address, value);
}

/**
* @brief   Replace arp-table by ID
*
* Replace operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
replace_mobilegateway_arp_table_list_by_id(const std::string &name, const std::vector<ArpTableJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace base-station by ID
*
* Replace operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
replace_mobilegateway_base_station_by_id(const std::string &name, const std::string &ip, const BaseStationJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->replaceBaseStation(ip, value);
}

/**
* @brief   Replace base-station by ID
*
* Replace operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
replace_mobilegateway_base_station_list_by_id(const std::string &name, const std::vector<BaseStationJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace ports by ID
*
* Replace operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
replace_mobilegateway_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->replacePorts(portsName, value);
}

/**
* @brief   Replace ports by ID
*
* Replace operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
replace_mobilegateway_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace secondaryip by ID
*
* Replace operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] ip ID of ip
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
replace_mobilegateway_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const PortsSecondaryipJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->replaceSecondaryip(ip, value);
}

/**
* @brief   Replace secondaryip by ID
*
* Replace operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
replace_mobilegateway_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace route by ID
*
* Replace operation of resource: route*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
* @param[in] value routebody object
*
* Responses:
*
*/
void
replace_mobilegateway_route_by_id(const std::string &name, const std::string &network, const std::string &nexthop, const RouteJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->replaceRoute(network, nexthop, value);
}

/**
* @brief   Replace route by ID
*
* Replace operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
replace_mobilegateway_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace user-equipment by ID
*
* Replace operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
replace_mobilegateway_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->replaceUserEquipment(ip, value);
}

/**
* @brief   Replace user-equipment by ID
*
* Replace operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
replace_mobilegateway_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update arp-table by ID
*
* Update operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
update_mobilegateway_arp_table_by_id(const std::string &name, const std::string &address, const ArpTableJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto arpTable = mobilegateway->getArpTable(address);

  return arpTable->update(value);
}

/**
* @brief   Update interface by ID
*
* Update operation of resource: interface*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value Outgoing interface
*
* Responses:
*
*/
void
update_mobilegateway_arp_table_interface_by_id(const std::string &name, const std::string &address, const std::string &value) {
  auto mobilegateway = get_cube(name);
  auto arpTable = mobilegateway->getArpTable(address);

  return arpTable->setInterface(value);
}

/**
* @brief   Update arp-table by ID
*
* Update operation of resource: arp-table*
*
* @param[in] name ID of name
* @param[in] value arp-tablebody object
*
* Responses:
*
*/
void
update_mobilegateway_arp_table_list_by_id(const std::string &name, const std::vector<ArpTableJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update mac by ID
*
* Update operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value Destination MAC address
*
* Responses:
*
*/
void
update_mobilegateway_arp_table_mac_by_id(const std::string &name, const std::string &address, const std::string &value) {
  auto mobilegateway = get_cube(name);
  auto arpTable = mobilegateway->getArpTable(address);

  return arpTable->setMac(value);
}

/**
* @brief   Update base-station by ID
*
* Update operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
update_mobilegateway_base_station_by_id(const std::string &name, const std::string &ip, const BaseStationJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto baseStation = mobilegateway->getBaseStation(ip);

  return baseStation->update(value);
}

/**
* @brief   Update base-station by ID
*
* Update operation of resource: base-station*
*
* @param[in] name ID of name
* @param[in] value base-stationbody object
*
* Responses:
*
*/
void
update_mobilegateway_base_station_list_by_id(const std::string &name, const std::vector<BaseStationJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update mobilegateway by ID
*
* Update operation of resource: mobilegateway*
*
* @param[in] name ID of name
* @param[in] value mobilegatewaybody object
*
* Responses:
*
*/
void
update_mobilegateway_by_id(const std::string &name, const MobilegatewayJsonObject &value) {
  auto mobilegateway = get_cube(name);

  return mobilegateway->update(value);
}

/**
* @brief   Update mobilegateway by ID
*
* Update operation of resource: mobilegateway*
*
* @param[in] value mobilegatewaybody object
*
* Responses:
*
*/
void
update_mobilegateway_list_by_id(const std::vector<MobilegatewayJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_mobilegateway_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->update(value);
}

/**
* @brief   Update direction by ID
*
* Update operation of resource: direction*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value Whether the port faces User Equipments (UE) or an external Packet Data Network (PDN)
*
* Responses:
*
*/
void
update_mobilegateway_ports_direction_by_id(const std::string &name, const std::string &portsName, const PortsDirectionEnum &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->setDirection(value);
}

/**
* @brief   Update ip by ID
*
* Update operation of resource: ip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value IP address and prefix of the port
*
* Responses:
*
*/
void
update_mobilegateway_ports_ip_by_id(const std::string &name, const std::string &portsName, const std::string &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->setIp(value);
}

/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_mobilegateway_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update mac by ID
*
* Update operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value MAC address of the port
*
* Responses:
*
*/
void
update_mobilegateway_ports_mac_by_id(const std::string &name, const std::string &portsName, const std::string &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);

  return ports->setMac(value);
}

/**
* @brief   Update secondaryip by ID
*
* Update operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] ip ID of ip
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
update_mobilegateway_ports_secondaryip_by_id(const std::string &name, const std::string &portsName, const std::string &ip, const PortsSecondaryipJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto ports = mobilegateway->getPorts(portsName);
  auto secondaryip = ports->getSecondaryip(ip);

  return secondaryip->update(value);
}

/**
* @brief   Update secondaryip by ID
*
* Update operation of resource: secondaryip*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value secondaryipbody object
*
* Responses:
*
*/
void
update_mobilegateway_ports_secondaryip_list_by_id(const std::string &name, const std::string &portsName, const std::vector<PortsSecondaryipJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update route by ID
*
* Update operation of resource: route*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
* @param[in] value routebody object
*
* Responses:
*
*/
void
update_mobilegateway_route_by_id(const std::string &name, const std::string &network, const std::string &nexthop, const RouteJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto route = mobilegateway->getRoute(network, nexthop);

  return route->update(value);
}

/**
* @brief   Update route by ID
*
* Update operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
update_mobilegateway_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update pathcost by ID
*
* Update operation of resource: pathcost*
*
* @param[in] name ID of name
* @param[in] network ID of network
* @param[in] nexthop ID of nexthop
* @param[in] value Cost of this route
*
* Responses:
*
*/
void
update_mobilegateway_route_pathcost_by_id(const std::string &name, const std::string &network, const std::string &nexthop, const uint32_t &value) {
  auto mobilegateway = get_cube(name);
  auto route = mobilegateway->getRoute(network, nexthop);

  return route->setPathcost(value);
}

/**
* @brief   Update user-equipment by ID
*
* Update operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
update_mobilegateway_user_equipment_by_id(const std::string &name, const std::string &ip, const UserEquipmentJsonObject &value) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);

  return userEquipment->update(value);
}

/**
* @brief   Update user-equipment by ID
*
* Update operation of resource: user-equipment*
*
* @param[in] name ID of name
* @param[in] value user-equipmentbody object
*
* Responses:
*
*/
void
update_mobilegateway_user_equipment_list_by_id(const std::string &name, const std::vector<UserEquipmentJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update rate-limit by ID
*
* Update operation of resource: rate-limit*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value Rate limit for the traffic exchanged by the User Equipment (in pps)
*
* Responses:
*
*/
void
update_mobilegateway_user_equipment_rate_limit_by_id(const std::string &name, const std::string &ip, const uint32_t &value) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);

  return userEquipment->setRateLimit(value);
}

/**
* @brief   Update teid by ID
*
* Update operation of resource: teid*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value Tunnel Endpoint ID of the GTP tunnel used by the User Equipment
*
* Responses:
*
*/
void
update_mobilegateway_user_equipment_teid_by_id(const std::string &name, const std::string &ip, const uint32_t &value) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);

  return userEquipment->setTeid(value);
}

/**
* @brief   Update tunnel-endpoint by ID
*
* Update operation of resource: tunnel-endpoint*
*
* @param[in] name ID of name
* @param[in] ip ID of ip
* @param[in] value IP address of the Base Station that connects the User Equipment
*
* Responses:
*
*/
void
update_mobilegateway_user_equipment_tunnel_endpoint_by_id(const std::string &name, const std::string &ip, const std::string &value) {
  auto mobilegateway = get_cube(name);
  auto userEquipment = mobilegateway->getUserEquipment(ip);

  return userEquipment->setTunnelEndpoint(value);
}



/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_arp_table_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);

  auto &&arpTable = mobilegateway->getArpTableList();
  for(auto &i : arpTable) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["address"] = i->getAddress();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_base_station_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);

  auto &&baseStation = mobilegateway->getBaseStationList();
  for(auto &i : baseStation) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["ip"] = i->getIp();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_ports_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);

  auto &&ports = mobilegateway->getPortsList();
  for(auto &i : ports) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_ports_secondaryip_list_by_id_get_list(const std::string &name, const std::string &portsName) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);
  auto &&ports = mobilegateway->getPorts(portsName);

  auto &&secondaryip = ports->getSecondaryipList();
  for(auto &i : secondaryip) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["ip"] = i->getIp();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_route_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);

  auto &&route = mobilegateway->getRouteList();
  for(auto &i : route) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["network"] = i->getNetwork();
    keys["nexthop"] = i->getNexthop();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_mobilegateway_user_equipment_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&mobilegateway = get_cube(name);

  auto &&userEquipment = mobilegateway->getUserEquipmentList();
  for(auto &i : userEquipment) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["ip"] = i->getIp();

    r.push_back(keys);
  }
  return r;
}


}

}
}
}

