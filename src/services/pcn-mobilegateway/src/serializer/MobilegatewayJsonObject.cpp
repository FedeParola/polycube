/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "MobilegatewayJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

MobilegatewayJsonObject::MobilegatewayJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_routeIsSet = false;
  m_arpTableIsSet = false;
  m_userEquipmentIsSet = false;
  m_baseStationIsSet = false;
}

MobilegatewayJsonObject::MobilegatewayJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_routeIsSet = false;
  m_arpTableIsSet = false;
  m_userEquipmentIsSet = false;
  m_baseStationIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("route")) {
    for (auto& item : val["route"]) {
      RouteJsonObject newItem{ item };
      m_route.push_back(newItem);
    }

    m_routeIsSet = true;
  }

  if (val.count("arp-table")) {
    for (auto& item : val["arp-table"]) {
      ArpTableJsonObject newItem{ item };
      m_arpTable.push_back(newItem);
    }

    m_arpTableIsSet = true;
  }

  if (val.count("user-equipment")) {
    for (auto& item : val["user-equipment"]) {
      UserEquipmentJsonObject newItem{ item };
      m_userEquipment.push_back(newItem);
    }

    m_userEquipmentIsSet = true;
  }

  if (val.count("base-station")) {
    for (auto& item : val["base-station"]) {
      BaseStationJsonObject newItem{ item };
      m_baseStation.push_back(newItem);
    }

    m_baseStationIsSet = true;
  }
}

nlohmann::json MobilegatewayJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_route) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["route"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_arpTable) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["arp-table"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_userEquipment) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["user-equipment"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_baseStation) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["base-station"] = jsonArray;
    }
  }

  return val;
}

std::string MobilegatewayJsonObject::getName() const {
  return m_name;
}

void MobilegatewayJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool MobilegatewayJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& MobilegatewayJsonObject::getPorts() const{
  return m_ports;
}

void MobilegatewayJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool MobilegatewayJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void MobilegatewayJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

const std::vector<RouteJsonObject>& MobilegatewayJsonObject::getRoute() const{
  return m_route;
}

void MobilegatewayJsonObject::addRoute(RouteJsonObject value) {
  m_route.push_back(value);
  m_routeIsSet = true;
}


bool MobilegatewayJsonObject::routeIsSet() const {
  return m_routeIsSet;
}

void MobilegatewayJsonObject::unsetRoute() {
  m_routeIsSet = false;
}

const std::vector<ArpTableJsonObject>& MobilegatewayJsonObject::getArpTable() const{
  return m_arpTable;
}

void MobilegatewayJsonObject::addArpTable(ArpTableJsonObject value) {
  m_arpTable.push_back(value);
  m_arpTableIsSet = true;
}


bool MobilegatewayJsonObject::arpTableIsSet() const {
  return m_arpTableIsSet;
}

void MobilegatewayJsonObject::unsetArpTable() {
  m_arpTableIsSet = false;
}

const std::vector<UserEquipmentJsonObject>& MobilegatewayJsonObject::getUserEquipment() const{
  return m_userEquipment;
}

void MobilegatewayJsonObject::addUserEquipment(UserEquipmentJsonObject value) {
  m_userEquipment.push_back(value);
  m_userEquipmentIsSet = true;
}


bool MobilegatewayJsonObject::userEquipmentIsSet() const {
  return m_userEquipmentIsSet;
}

void MobilegatewayJsonObject::unsetUserEquipment() {
  m_userEquipmentIsSet = false;
}

const std::vector<BaseStationJsonObject>& MobilegatewayJsonObject::getBaseStation() const{
  return m_baseStation;
}

void MobilegatewayJsonObject::addBaseStation(BaseStationJsonObject value) {
  m_baseStation.push_back(value);
  m_baseStationIsSet = true;
}


bool MobilegatewayJsonObject::baseStationIsSet() const {
  return m_baseStationIsSet;
}

void MobilegatewayJsonObject::unsetBaseStation() {
  m_baseStationIsSet = false;
}


}
}
}

