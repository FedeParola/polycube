/**
* mobilegateway API generated from mobilegateway.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* MobilegatewayJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ArpTableJsonObject.h"
#include "RouteJsonObject.h"
#include "PortsJsonObject.h"
#include "BaseStationJsonObject.h"
#include "UserEquipmentJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  MobilegatewayJsonObject : public JsonObjectBase {
public:
  MobilegatewayJsonObject();
  MobilegatewayJsonObject(const nlohmann::json &json);
  ~MobilegatewayJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the mobilegateway service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  /// Entry associated with the routing table
  /// </summary>
  const std::vector<RouteJsonObject>& getRoute() const;
  void addRoute(RouteJsonObject value);
  bool routeIsSet() const;
  void unsetRoute();

  /// <summary>
  /// Entry associated with the ARP table
  /// </summary>
  const std::vector<ArpTableJsonObject>& getArpTable() const;
  void addArpTable(ArpTableJsonObject value);
  bool arpTableIsSet() const;
  void unsetArpTable();

  /// <summary>
  /// User Equipment handled by the Gateway
  /// </summary>
  const std::vector<UserEquipmentJsonObject>& getUserEquipment() const;
  void addUserEquipment(UserEquipmentJsonObject value);
  bool userEquipmentIsSet() const;
  void unsetUserEquipment();

  /// <summary>
  /// Base Station used to reach User Equipments
  /// </summary>
  const std::vector<BaseStationJsonObject>& getBaseStation() const;
  void addBaseStation(BaseStationJsonObject value);
  bool baseStationIsSet() const;
  void unsetBaseStation();

private:
  std::string m_name;
  bool m_nameIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  std::vector<RouteJsonObject> m_route;
  bool m_routeIsSet;
  std::vector<ArpTableJsonObject> m_arpTable;
  bool m_arpTableIsSet;
  std::vector<UserEquipmentJsonObject> m_userEquipment;
  bool m_userEquipmentIsSet;
  std::vector<BaseStationJsonObject> m_baseStation;
  bool m_baseStationIsSet;
};

}
}
}

